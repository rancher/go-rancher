account: description: All resources in Rancher are owned or created by an account. resourceFields:    created:     description:     id:     kind:     name:     removed:     state:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    activate:     create:     deactivate:     purge:     remove:     restore:     update: activeSetting: description:  resourceFields:    activeValue:     id:     name:     value: addLoadBalancerInput: description:  resourceFields:    loadBalancerId:     weight: addOutputsInput: description:  resourceFields:    outputs: addRemoveClusterHostInput: description:  resourceFields:    hostId: addRemoveLoadBalancerHostInput: description:  resourceFields:    hostId: addRemoveLoadBalancerListenerInput: description:  resourceFields:    loadBalancerListenerId: addRemoveLoadBalancerServiceLinkInput: description:  resourceFields:    serviceLink: addRemoveLoadBalancerTargetInput: description:  resourceFields:    loadBalancerTarget: addRemoveServiceLinkInput: description:  resourceFields:    serviceLink: amazonec2Config: description: The configuration to launch an EC2 instance in Amazon Web Services using [machine]({{site.baseurl}}/rancher/api/api-resources/machine). Rancher is calling `docker-machine`, so any available options in `docker-machine` for specific drivers are exposed in Rancher. The default fields from `docker-machine` are not listed in the Rancher API, and they can be found in the `docker-machine` documentation. The notes on which fields are **required** are from the `docker-machine` documentation. resourceFields:    accessKey: <strong>required</strong> Your access key id for the Amazon Web Services API    ami: The AMI ID of the instance to use    iamInstanceProfile: The AWS IAM instance role name to be used as the instance profile    instanceType: The AWS instance type to run    monitoring: Whether or not to enable CloudWatch Monitoring    privateAddressOnly: Whether or not to use the AWS EC2 private IP address    region:     requestSpotInstance: Whether or not to use AWS EC2 spot instances    rootSize: The root disk size of the AWS EC2 instance (in GB)    secretKey: <strong>required</strong> Your secret access key for the Amazon Web Services API    securityGroup: The AWS VPC security group name to use when launching your instance    sessionToken: The session token for the AWS API    spotPrice: The spot instance bid price (in dollars) if the `requestSpotInstance` is `true`.    sshUser:     subnetId: The AWS VPC subnet ID    usePrivateAddress: Whether or not to use the AWS EC2 private IP address    vpcId: <strong>required</strong> The VPC ID to launch the instance in    zone: The AWS zone to launch the instance in (i.e. one of a, b, c, d, e)apiKey: description: An API Key provides access to the Rancher API if access control has been turned on. The access key and secret key pair are created per environment and can be used to directly call the API or used with [rancher-compose]({{site.baseurl}}/rancher/rancher-compose). resourceFields:    accountId:     created:     description:     id:     kind:     name:     publicValue:     removed:     secretValue:     state:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    activate:     create:     deactivate:     purge:     remove:     update: azureConfig: description: The configuration to launch an instance in Microsoft Azure. For all cloud providers, Rancher is calling `docker-machine`, so any available options in `docker-machine` are exposed in Rancher. The default fields from `docker-machine` are not listed in the Rancher API, and they can be found in the `docker-machine` documentation.  resourceFields:    dockerPort: The port to use for the Docker daemon    dockerSwarmMasterPort:     image: The Azure image name    location: The Azure machine instance location    password: Your Azure password    publishSettingsFile: The Azure setting file    size: The Azure disk size    sshPort:     subscriptionCert: <strong>required</strong> The Azure subscription certificate    subscriptionId: <strong>required</strong>The Azure subscription ID (ie. A GUID like`d255d8d7-5af0-4f5c-8a3e-1545044b861e`)    username: Your Azure login user namecertificate: description: A certificate is used to add in SSL termination to load balancers. resourceFields:    CN: The common name     accountId:     algorithm:     cert:     certChain:     certFingerprint:     created:     description:     expiresAt: The date that the certificate expires at    id:     issuedAt: The date that the certificate was issued    issuer: The issuer of the certificate    key:     keySize:     kind:     name:     removed:     serialNumber:     state:     subjectAlternativeNames:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:     version:  resourceActions:    create:     remove: changeSecretInput: description:  resourceFields:    newSecret: Value of the new secret    oldSecret: Value of the old secretcluster: description: Collection Test Description resourceFields:    accountId:     agentState: The state of the agent    computeTotal:     created:     description:     discoverySpec:     id:     info:     kind:     labels:     name:     physicalHostId: The unique identifier of the physical host    port:     removed:     state:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    activate:     addhost:     create:     deactivate:     dockersocket:     purge:     remove:     removehost:     restore:     update: composeConfig: description:  resourceFields:    dockerComposeConfig: The `docker-compose.yml` file to pass to `rancher-compose create`    rancherComposeConfig: The `rancher-compose.yml` file to pass to `rancher-compose create`composeConfigInput: description:  resourceFields:    serviceIds: The list of Service IDs in the `docker-compose.yml`container: description: A container is a representation of a Docker container on a host.  resourceFields:    accountId:     build:     capAdd: Add Linux capabilities. <code>--cap-add</code> in a <code>docker run</code> command    capDrop: Drop Linux capabilities. <code>--cap-drop</code> in a <code>docker run</code> command    command: Overwrite the default commands set by the image    count:     cpuSet: CPUs in which to allow execution (0-3, 0,1). <code>--cpuset</code> in a <code>docker run</code> command    cpuShares: CPU shares (relative weight). <code>--cpu-shares</code> in a <code>docker run</code> command    createIndex: The order that the container was created in a service.    created:     dataVolumeMounts:     dataVolumes:     dataVolumesFrom:     deploymentUnitUuid:     description:     devices: Allows you to run devices inside the container without the <code>--privileged</code> flag    dns: Set custom dns servers for the container. <code>--dns</code> in a <code>docker run</code> command    dnsSearch:     domainName:     entryPoint: Overwrite the default entrypoint set by the image. <code>--entrypoint</code> in a <code>docker run</code> command    environment:     expose:     externalId:     extraHosts:     firstRunning:     healthCheck: The configuration of the health monitoring for managed network services    healthState:     hostname:     id:     imageUuid:     instanceLinks:     kind:     labels:     logConfig: The logging configuration. <code>--log-driver</code> in a <code>docker run</code> command    lxcConf: Add custom lxc options. <code>--lxc-conf</code> in a <code>docker run</code> command    memory:     memorySwap: Total memory limit (memory + swap, `<number>[<unit>]`, where unit = b, k, m or g). <code>--memory-swap</code> in a <code>docker run</code> command    name:     nativeContainer:     networkContainerId:     networkIds:     networkMode: Set the Network mode for the container. <code>--net</code> in a <code>docker run</code> command <br> `bridge` - creates a new network stack for the container on the docker bridge<br> `none` -no networking for this container<br> `container<colon><name|id>` - reuses another container network stack<br> `host` - use the host network stack inside the container    pidMode: Set the PID (Process) Namespace mode for the container. `host` - use the host's PID namespace inside the container.  <code>--pid</code> in a <code>docker run</code> command    ports:     primaryIpAddress:     privileged: Give extended privileges to this container. <code>--privileged</code> in a <code>docker run</code> command    publishAllPorts: Publish all exposed ports to the host interfaces    readOnly:     registryCredentialId:     removed:     requestedHostId:     restartPolicy: Specify a restart policy for how a container should or should not be restarted on exit.    securityOpt: Override the default labeling scheme for each container. <code>--security-opt</code> in a <code>docker run</code> command    startCount:     startOnCreate: Whether or not the services in the stack should be started after creation    state:     stdinOpen: Keep STDIN open even if not attached. <code>-i</code> in a <code>docker run</code> command    systemContainer:     transitioning:     transitioningMessage:     transitioningProgress:     tty: Allocate a pseudo-tty. <code>-t</code> in a <code>docker run</code> command    user:     uuid:     version:     volumeDriver:     workingDir: The working directory inside the container resourceActions:    allocate:     console:     create:     deallocate:     execute:     logs:     migrate:     purge:     remove:     restart:     restore:     setlabels:     start:     stop:     update:     updatehealthy:     updateunhealthy: containerEvent: description: Collection Test Description resourceFields:    accountId:     created:     dockerInspect:     externalFrom:     externalId:     externalStatus:     externalTimestamp:     hostId:     id:     kind:     reportedHostUuid:     state:     transitioning:     transitioningMessage:     transitioningProgress:  resourceActions:    create:     remove: containerExec: description: Collection Test Description resourceFields:    attachStdin: Attach to standard in stream. <code>-a stdin</code> in a <code>docker run</code> command    attachStdout: Attach to standard out stream. <code>-a stdout</code> in a <code>docker run</code> command    command: Overwrite the default commands set by the image    tty: Allocate a pseudo-tty. <code>-t</code> in a <code>docker run</code> commandcontainerLogs: description:  resourceFields:    follow:     lines: credential: description: Collection Test Description resourceFields:    accountId:     created:     description:     id:     kind:     name:     publicValue:     removed:     secretValue:     state:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    activate:     create:     deactivate:     purge:     remove:     update: digitaloceanConfig: description: The configuration to launch a droplet in DigitalOcean using [machine]({{site.baseurl}}/rancher/api/api-resources/machine). Rancher is calling `docker-machine`, so any available options in `docker-machine` for specific drivers are exposed in Rancher. The default fields from `docker-machine` are not listed in the Rancher API, and they can be found in the `docker-machine` documentation.  resourceFields:    accessToken: <strong>required</strong>Your personal access token for the Digital Ocean API    backups: Whether or not to enable Digital Oceans backups for the droplet    image: The name of the Digital Ocean image to use    ipv6: Whether or not to enable IPv6 support for the droplet    privateNetworking: Whether or not to enable private networking support for the droplet    region:     size: The size of the Digital Ocean droplet (larger than the default option (`512mb`) are of the form `2gb`)    sshUser: dnsService: description: A "dnsService" in the API is referred to as a Service Alias in the UI and the Rancher documentation. In the API documentation, we'll use the UI terminology. A service alias allows the ability to add a DNS record for your services to be discovered. resourceFields:    accountId:     created:     description:     environmentId: The identifier of which stack the service belongs to    externalId:     fqdn: The fqdn of a service when the [Route 53 DNS service]({{site.baseurl}}/rancher/rancher-services/dns-service/) has started. The format will be `<serviceName>.<stackName>.<environmentName>.<yourHostedZoneName>`.    id:     kind:     launchConfig: The Docker run configuration of a container    metadata: The user added [metadata]({{site.baseurl}}/rancher/metadata-service/#adding-user-metadata-to-a-service) to a service.    name:     removed:     selectorLink: The [selector value]({{site.baseurl}}/rancher/labels/#selector-labels) used to select a [service]({{site.baseurl}}/rancher/api/api-resources/service/) to link to the service based on a service's labels.    state:     transitioning:     transitioningMessage:     transitioningProgress:     upgrade:     uuid:  resourceActions:    activate:     addservicelink:     cancelrollback:     cancelupgrade:     create:     deactivate:     finishupgrade:     remove:     removeservicelink:     rollback:     setservicelinks:     update:     upgrade: dockerBuild: description: Collection Test Description resourceFields:    context:     dockerfile:     forcerm:     nocache:     remote:     rm: environment: description: An "environment" in the API is referred to as a stack in the UI and the Rancher documentation. In the API documentation, we'll use the UI terminology. A Rancher stack mirrors the same concept as a docker-compose project.  It represents a group of services that make up a typical application or workload. resourceFields:    accountId:     created:     description:     dockerCompose: The docker-compose.yml file for the stack    environment:     externalId:     id:     kind:     name:     outputs:     previousExternalId:     rancherCompose: The rancher-compose.yml file for the stack    removed:     startOnCreate: Whether or not the services in the stack should be started after creation    state:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    activateservices:     addoutputs:     cancelrollback:     cancelupgrade:     create:     deactivateservices:     error:     exportconfig:     finishupgrade:     remove:     rollback:     update:     upgrade: environmentUpgrade: description: Collection Test Description resourceFields:    dockerCompose: The docker-compose.yml file for the stack    environment:     externalId:     rancherCompose: The rancher-compose.yml file for the stackexoscaleConfig: description: The configuration to launch an instance in exoscale using [machine]({{site.baseurl}}/rancher/api/api-resources/machine). Rancher is calling `docker-machine`, so any available options in `docker-machine` for specific drivers are exposed in Rancher. The default fields from `docker-machine` are not listed in the Rancher API, and they can be found in the `docker-machine` documentation. The notes on which fields are **required** are from the `docker-machine` documentation. resourceFields:    apiKey: <strong>required</strong> Your API key    apiSecretKey: <strong>required</strong> Your API secret key    availabilityZone: The exoscale availability zone    diskSize: The disk size for the host in GB    image: The image name for exoscale    instanceProfile: The instance profile    securityGroup: The security group to use in exoscale, which will be created if it doesn’t exist    url: Your API endpointexternalDnsEvent: description: Collection Test Description resourceFields:    accountId:     created:     eventType:     externalId:     fqdn: The fqdn of a service when the [Route 53 DNS service]({{site.baseurl}}/rancher/rancher-services/dns-service/) has started. The format will be `<serviceName>.<stackName>.<environmentName>.<yourHostedZoneName>`.    id:     kind:     reportedAccountId:     serviceName:     stackName:     state:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    create:     remove: externalEvent: description: Collection Test Description resourceFields:    accountId:     created:     eventType:     externalId:     id:     kind:     reportedAccountId:     state:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    create:     remove: externalHostEvent: description:  resourceFields:    accountId:     created:     deleteHost:     eventType:     externalId:     hostId:     hostLabel:     id:     kind:     reportedAccountId:     state:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    create:     remove: externalService: description: An external service allows the ability to add any IP or hostname as a service to be discovered as a service. resourceFields:    accountId:     created:     description:     environmentId: The identifier of which stack the service belongs to    externalId:     externalIpAddresses: The external IP address used for an external service    fqdn: The fqdn of a service when the [Route 53 DNS service]({{site.baseurl}}/rancher/rancher-services/dns-service/) has started. The format will be `<serviceName>.<stackName>.<environmentName>.<yourHostedZoneName>`.    healthCheck: The configuration of the health monitoring for managed network services    hostname:     id:     kind:     launchConfig: The Docker run configuration of a container    metadata: The user added [metadata]({{site.baseurl}}/rancher/metadata-service/#adding-user-metadata-to-a-service) to a service.    name:     removed:     selectorLink: The [selector value]({{site.baseurl}}/rancher/labels/#selector-labels) used to select a [service]({{site.baseurl}}/rancher/api/api-resources/service/) to link to the service based on a service's labels.    state:     transitioning:     transitioningMessage:     transitioningProgress:     upgrade:     uuid:  resourceActions:    activate:     addservicelink:     cancelrollback:     cancelupgrade:     create:     deactivate:     finishupgrade:     remove:     removeservicelink:     rollback:     setservicelinks:     update:     upgrade: externalServiceEvent: description:  resourceFields:    accountId:     created:     environment:     eventType:     externalId:     id:     kind:     reportedAccountId:     service:     state:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    create:     remove: externalStoragePoolEvent: description: Collection Test Description resourceFields:    accountId:     created:     eventType:     externalId:     hostUuids:     id:     kind:     reportedAccountId:     state:     storagePool:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    create:     remove: externalVolumeEvent: description: Collection Test Description resourceFields:    accountId:     created:     eventType:     externalId:     id:     kind:     reportedAccountId:     state:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:     volume:  resourceActions:    create:     remove: fieldDocumentation: description:  resourceFields:    description: globalLoadBalancer: description: Collection Test Description resourceFields:    accountId:     created:     description:     globalLoadBalancerHealthCheck:     globalLoadBalancerPolicy:     id:     kind:     name:     removed:     state:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    addloadbalancer:     create:     remove:     removeloadbalancer: globalLoadBalancerHealthCheck: description:  resourceFields:    name: globalLoadBalancerPolicy: description:  resourceFields:    name: host: description: Hosts are the most basic unit of resource within Rancher and is represented as any Linux server, virtual or physical, with the following minimum requirements. <br> <br> * Any modern Linux distribution that supports Docker 1.6+. <br> * Must be able to communicate with the Rancher server via http or https through the pre-configured port (Default is 8080). <br> * Must be routable to any other hosts belonging to the same environment to leverage Rancher's cross-host networking for Docker containers.<br> <br> Rancher also supports Docker Machine and allows you to add your host via any of its supported drivers. resourceFields:    accountId:     agentState: The state of the agent    computeTotal:     created:     description:     id:     info:     kind:     labels:     name:     physicalHostId: The unique identifier of the physical host    removed:     state:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    activate:     create:     deactivate:     dockersocket:     purge:     remove:     restore:     update: hostAccess: description: Collection Test Description resourceFields:    token:     url: identity: description: An identity is Rancher's representation of an object(i.e. `ldap_group`, `github_user`) when Rancher has turned on [access control]({{site.baseurl}}/rancher/configuration/access-control/). The `externalId` in an identity is the unique identifier in the authentication system that represents the object. The role of an identity is always null unless it is being returned as the identity of a [projectMember]({{site.baseurl}}/rancher/api/api-resources/projectMember/).  resourceFields:    all:     externalId:     externalIdType:     id:     login:     name:     profilePicture:     profileUrl:     projectId:     role: image: description: Collection Test Description resourceFields:    accountId:     created:     description:     id:     kind:     name:     removed:     state:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    activate:     create:     deactivate:     purge:     remove:     restore:     update: inServiceUpgradeStrategy: description:  resourceFields:    batchSize: The batch size to upgrade a service (i.e. how many containers to launch at a time)    intervalMillis: The number of milliseconds between upgrading    launchConfig: The Docker run configuration of a container    previousLaunchConfig:     previousSecondaryLaunchConfigs:     secondaryLaunchConfigs: The list of services that are sidekicks to the service.    startFirst: instance: description: Collection Test Description resourceFields:    accountId:     created:     description:     externalId:     id:     kind:     name:     removed:     state:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    allocate:     console:     create:     deallocate:     migrate:     purge:     remove:     restart:     restore:     start:     stop:     update:     updatehealthy:     updateunhealthy: instanceConsole: description:  resourceFields:    kind:     password:     url: instanceConsoleInput: description: instanceHealthCheck: description:  resourceFields:    healthyThreshold:     interval:     name:     port:     requestLine:     responseTimeout:     unhealthyThreshold: instanceLink: description: Collection Test Description resourceFields:    accountId:     created:     description:     id:     instanceId:     kind:     linkName:     name:     removed:     state:     targetInstanceId:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    activate:     create:     deactivate:     purge:     remove:     restore:     update: instanceStop: description:  resourceFields:    remove:     timeout: ipAddress: description: Collection Test Description resourceFields:    accountId:     address:     created:     description:     id:     kind:     name:     networkId:     removed:     state:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    activate:     associate: Default action    create:     deactivate:     disassociate: Default action    purge:     remove:     restore:     update: ipAddressAssociateInput: description:  resourceFields:    ipAddressId: label: description: Collection Test Description resourceFields:    accountId:     created:     description:     id:     key:     kind:     name:     removed:     state:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:     value:  resourceActions:    create:     remove: launchConfig: description:  resourceFields:    accountId:     build:     capAdd: Add Linux capabilities. <code>--cap-add</code> in a <code>docker run</code> command    capDrop: Drop Linux capabilities. <code>--cap-drop</code> in a <code>docker run</code> command    command: Overwrite the default commands set by the image    count:     cpuSet: CPUs in which to allow execution (0-3, 0,1). <code>--cpuset</code> in a <code>docker run</code> command    cpuShares: CPU shares (relative weight). <code>--cpu-shares</code> in a <code>docker run</code> command    createIndex: The order that the container was created in a service.    created:     dataVolumeMounts:     dataVolumes:     dataVolumesFrom:     dataVolumesFromLaunchConfigs:     deploymentUnitUuid:     description:     devices: Allows you to run devices inside the container without the <code>--privileged</code> flag    dns: Set custom dns servers for the container. <code>--dns</code> in a <code>docker run</code> command    dnsSearch:     domainName:     entryPoint: Overwrite the default entrypoint set by the image. <code>--entrypoint</code> in a <code>docker run</code> command    environment:     expose:     externalId:     extraHosts:     firstRunning:     healthCheck: The configuration of the health monitoring for managed network services    healthState:     hostname:     id:     imageUuid:     instanceLinks:     kind:     labels:     logConfig: The logging configuration. <code>--log-driver</code> in a <code>docker run</code> command    lxcConf: Add custom lxc options. <code>--lxc-conf</code> in a <code>docker run</code> command    memory:     memorySwap: Total memory limit (memory + swap, `<number>[<unit>]`, where unit = b, k, m or g). <code>--memory-swap</code> in a <code>docker run</code> command    nativeContainer:     networkContainerId:     networkIds:     networkLaunchConfig:     networkMode: Set the Network mode for the container. <code>--net</code> in a <code>docker run</code> command <br> `bridge` - creates a new network stack for the container on the docker bridge<br> `none` -no networking for this container<br> `container<colon><name|id>` - reuses another container network stack<br> `host` - use the host network stack inside the container    pidMode: Set the PID (Process) Namespace mode for the container. `host` - use the host's PID namespace inside the container.  <code>--pid</code> in a <code>docker run</code> command    ports:     primaryIpAddress:     privileged: Give extended privileges to this container. <code>--privileged</code> in a <code>docker run</code> command    publishAllPorts: Publish all exposed ports to the host interfaces    readOnly:     registryCredentialId:     removed:     requestedHostId:     securityOpt: Override the default labeling scheme for each container. <code>--security-opt</code> in a <code>docker run</code> command    startCount:     startOnCreate: Whether or not the services in the stack should be started after creation    state:     stdinOpen: Keep STDIN open even if not attached. <code>-i</code> in a <code>docker run</code> command    systemContainer:     transitioning:     transitioningMessage:     transitioningProgress:     tty: Allocate a pseudo-tty. <code>-t</code> in a <code>docker run</code> command    user:     uuid:     version:     volumeDriver:     workingDir: The working directory inside the container resourceActions:    allocate:     console:     create:     deallocate:     execute:     logs:     migrate:     purge:     remove:     restart:     restore:     setlabels:     start:     stop:     update:     updatehealthy:     updateunhealthy: loadBalancer: description:  resourceFields:    accountId:     certificateIds: The ID of a certificate    created:     defaultCertificateId: The ID of a default certificate    description:     globalLoadBalancerId:     id:     kind:     loadBalancerConfigId:     name:     removed:     serviceId:     state:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:     weight:  resourceActions:    activate:     addhost:     addtarget:     create:     deactivate:     remove:     removehost:     removetarget:     sethosts:     settargets:     update: loadBalancerAppCookieStickinessPolicy: description:  resourceFields:    cookie:     maxLength:     mode:     name:     prefix:     requestLearn:     timeout: loadBalancerConfig: description: Collection Test Description resourceFields:    accountId:     appCookieStickinessPolicy:     created:     description:     healthCheck: The configuration of the health monitoring for managed network services    id:     kind:     lbCookieStickinessPolicy:     name:     removed:     serviceId:     state:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    addlistener: Default action    create:     remove:     removelistener: Default action    setlisteners: Default action    update: loadBalancerConfigListenerMap: description: Collection Test Description resourceFields:    accountId:     created:     description:     id:     kind:     loadBalancerConfigId:     loadBalancerListenerId:     name:     removed:     state:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    create:     remove: loadBalancerCookieStickinessPolicy: description:  resourceFields:    cookie:     domain:     indirect: Whether or not to have an indirect cookie    mode:     name:     nocache:     postonly: Whether or not to only set cookie on POSTloadBalancerHealthCheck: description:  resourceFields:    healthyThreshold:     interval:     name:     port:     requestLine:     responseTimeout:     unhealthyThreshold: loadBalancerHostMap: description: Collection Test Description resourceFields:    accountId:     created:     description:     hostId:     id:     kind:     loadBalancerId:     name:     removed:     state:     uuid: loadBalancerListener: description: Collection Test Description resourceFields:    accountId:     algorithm:     created:     description:     id:     kind:     name:     privatePort: The private port     removed:     serviceId:     sourcePort:     sourceProtocol:     state:     targetPort:     targetProtocol:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    create:     remove: loadBalancerService: description: Rancher implements a managed load balancer using HAProxy that can be manually scaled to multiple hosts.  A load balancer can be used to distribute network and application traffic to individual containers by directly adding them or "linked" to a basic service.  A basic service that is "linked" will have all its underlying containers automatically registered as load balancer targets by Rancher. resourceFields:    accountId:     certificateIds: The ID of a certificate    created:     defaultCertificateId: The ID of a default certificate    description:     environmentId: The identifier of which stack the service belongs to    externalId:     fqdn: The fqdn of a service when the [Route 53 DNS service]({{site.baseurl}}/rancher/rancher-services/dns-service/) has started. The format will be `<serviceName>.<stackName>.<environmentName>.<yourHostedZoneName>`.    id:     kind:     launchConfig: The Docker run configuration of a container    loadBalancerConfig: Configuration of a load balancer    metadata: The user added [metadata]({{site.baseurl}}/rancher/metadata-service/#adding-user-metadata-to-a-service) to a service.    name:     removed:     scale: The number of containers to deploy as part of a service    selectorLink: The [selector value]({{site.baseurl}}/rancher/labels/#selector-labels) used to select a [service]({{site.baseurl}}/rancher/api/api-resources/service/) to link to the service based on a service's labels.    state:     transitioning:     transitioningMessage:     transitioningProgress:     upgrade:     uuid:     vip:  resourceActions:    activate:     addservicelink:     cancelrollback:     cancelupgrade:     create:     deactivate:     finishupgrade:     remove:     removeservicelink:     rollback:     setservicelinks:     update:     upgrade: loadBalancerServiceLink: description:  resourceFields:    ports:     serviceId: loadBalancerTarget: description: Collection Test Description resourceFields:    accountId:     created:     description:     id:     instanceId:     ipAddress: The ip address for an external service    kind:     loadBalancerId:     name:     ports:     removed:     state:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    create:     remove:     update: logConfig: description:  resourceFields:    config:     driver: The logging driver option to use in a logConfig.machine: description: Machines are created whenever Rancher uses `docker-machine` to create hosts in Rancher. Adding any type of host through the UI that is not the custom command option is calling `docker-machine` and a machine entry will be created as well as a [host]({{site.baseurl}}/rancher/api/api-resources/host).  resourceFields:    accountId:     amazonec2Config: Configuration for launching a host in Amazon EC2    authCertificateAuthority:     authKey:     azureConfig: Configuration for launching a host in Microsoft Azure    created:     description:     digitaloceanConfig: Configuration for launching a host in DigitalOcean    dockerVersion:     driver:     engineOpts:     exoscaleConfig: Configuration for launching a host in exoscale    externalId:     id:     kind:     labels:     name:     openstackConfig: Configuration for launching a host in OpenStack    packetConfig: Configuration for launching a host in Packet    rackspaceConfig: Configuration for launching a host in Rackspace    removed:     softlayerConfig: Configuration for launching a host in IBM Softlayer    state:     transitioning:     transitioningMessage:     transitioningProgress:     ubiquityConfig:     uuid:     virtualboxConfig: Configuration for launching a host in Oracle VirtualBox    vmwarevcloudairConfig: Configuration for launching a host in VMware vCloud Air    vmwarevsphereConfig: Configuration for launching a host in VMware vSphere resourceActions:    bootstrap: Default action    create:     error:     remove:     update: mount: description: A mount is the relationship of a volume and the directory location inside the container.  resourceFields:    accountId:     created:     description:     id:     instanceId:     kind:     name:     path:     permissions:     removed:     state:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:     volumeId:  resourceActions:    activate:     create:     deactivate:     purge:     remove:     restore:     update: network: description: Collection Test Description resourceFields:    accountId:     created:     description:     id:     kind:     name:     removed:     state:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    activate:     create:     deactivate:     purge:     remove:     restore:     update: openstackConfig: description: The configuration to launch an instance in OpenStack. For all cloud providers, Rancher is calling `docker-machine`, so any available options in `docker-machine` are exposed in Rancher. The default fields from `docker-machine` are not listed in the Rancher API, and they can be found in the `docker-machine` documentation.  resourceFields:    authUrl: The keystone service base URL    availabilityZone: The availability zone in which to launch the server    domainId: The ID of the domain to use for authentication (Keystone v3 only)    domainName: Domain to use for authentication (Keystone v3 only)    endpointType: Endpoint type can be `internalURL`, `adminURL`, or` publicURL`. If is a helper for the driver to choose the right URL in the OpenStack service catalog. If not provided the default id `publicURL`    flavorId: The ID of the flavor that will be used for the machine    flavorName: The name of the flavor that will be used for the machine    floatingipPool: The IP pool that will be used to get a public IP can assign it to the machine. If there is an IP address already allocated but not assigned to any machine, this IP will be chosen and assigned to the machine. If there is no IP address already allocated a new IP will be allocated and assigned to the machine.    imageId: The ID of the image that will be used for the machine    imageName: The name of the image that will be used for the machine    insecure: Explicitly allow OpenStack driver to perform “insecure” SSL (https) requests. The server’s certificate will not be verified against any certificate authorities. This option should be used with caution.    netId: The ID of the private network the machine will be connected on. If your OpenStack project project contains only one private network it will be use automatically.    netName: The name of the private network the machine will be connected on. If your OpenStack project  contains only one private network it will be use automatically.    password: Your user password    region:     secGroups: If security groups are available on your OpenStack you can specify a comma separated list to use for the machine (e.g. `secgrp001`,`secgrp002`)    sshPort:     sshUser:     tenantId: The ID of the tenant in which the machine will be created    tenantName: The name of the tenant in which the machine will be created    username: The user identifier to authenticate withpacketConfig: description: The configuration to launch an instance in Packet. resourceFields:    apiKey: <strong>required</strong> Your API key    billingCycle: The billing cycle to use for Packet instances    facilityCode: The region or facility code to launch packet    os: The OS to install    plan: The Packet server plan    projectId: password: description: Collection Test Description resourceFields:    accountId:     created:     description:     id:     kind:     name:     publicValue:     removed:     secretValue:     state:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    activate:     changesecret: Change the password    create:     deactivate:     purge:     remove:     update: physicalHost: description: Collection Test Description resourceFields:    accountId:     created:     description:     id:     kind:     name:     removed:     state:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    bootstrap: Default action    create:     error:     remove:     update: port: description: Collection Test Description resourceFields:    accountId:     created:     description:     id:     instanceId:     kind:     name:     privateIpAddressId: The unique identifier of the private IP address    privatePort: The private port     protocol:     publicIpAddressId: The unique identifier of the public IP address     publicPort:     removed:     state:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    activate:     create:     deactivate:     purge:     remove:     restore:     update: project: description: A "project" in the API is referred to as an environment in the UI and Rancher documentation. In the API documentation, we'll use the UI terminology.  All hosts and any Rancher resources (i.e. containers, load balancers, etc.) are created and belong to an [environment]({{site.baseurl}}/rancher/configuration/environments/).  Access control to who can view and manage these resources are then defined by the owner of the environment.  Rancher currently supports the capability for each user to manage and invite other users to their environment and allows for the ability to create multiple environments for different workloads.  For example, you may want to create a "dev" environment and a separate "production" environment with its own set of resources and limited user access for your application deployment. resourceFields:    created:     description:     id:     kind:     kubernetes:     members:     name:     removed:     state:     swarm:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    activate:     create:     deactivate:     delete: Default action    purge:     remove:     restore:     setmembers: Default action    update: projectMember: description: A "project member" in the API is referred to as an environment members in the UI and Rancher documentation. An environment member is a list of all of the members of the  environment. An environment member is an [identity]({{site.baseurl}}/rancher/api/api-resources/identity). resourceFields:    created:     description:     externalId:     externalIdType:     id:     kind:     name:     projectId:     removed:     role:     state:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    activate:     create:     deactivate:     purge:     remove:     restore:     update: pullTask: description: Collection Test Description resourceFields:    accountId:     created:     description:     id:     image:     kind:     labels:     mode:     name:     removed:     state:     status:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    activate:     create:     deactivate:     purge:     remove:     restore:     update: rackspaceConfig: description: The configuration to launch a server in Rackspace. For all cloud providers, Rancher is calling `docker-machine`, so any available options in `docker-machine` are exposed in Rancher. The default fields from `docker-machine` are not listed in the Rancher API, and they can be found in the `docker-machine` documentation.  resourceFields:    apiKey: <strong>required</strong> Your Rackspace API key    dockerInstall: Whether or not if Docker should be installed on the machine    endpointType: Endpoint type can be `internalURL`, `adminURL`, or` publicURL`. If is a helper for the driver to choose the right URL in the OpenStack service catalog. If not provided the default id `publicURL`    flavorId: The ID of the flavor that will be used for the machine    imageId: The ID of the image that will be used for the machine    region:     sshPort:     sshUser:     username: <strong>required</strong> Your Rackspace account username.register: description: Collection Test Description resourceFields:    accessKey:     accountId:     created:     description:     id:     key:     kind:     name:     removed:     secretKey:     state:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    activate:     create:     deactivate:     purge:     remove:     restore:     stop:     update: registrationToken: description: Collection Test Description resourceFields:    accountId:     command:     created:     description:     id:     image:     kind:     name:     registrationUrl: The registration URL of the registration token    removed:     state:     token:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    activate:     create:     deactivate:     purge:     remove:     update: registry: description: A registry is where image repositories are hosted. The repository can be either from DockerHub, Quay.io, or a custom private registry.  resourceFields:    accountId:     created:     description:     driverName:     externalId:     id:     kind:     name:     removed:     serverAddress: The address of the registry to use    state:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    activate:     create:     deactivate:     purge:     remove:     restore:     update: registryCredential: description: A registry credential is used to authenticate against a [registry]({{site.baseurl}}/rancher/api/api-resources/registry).  resourceFields:    accountId:     created:     description:     email: The email address of the credential to use with a registry    id:     kind:     name:     publicValue:     registryId: The unique identifier of a registry    removed:     secretValue:     state:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    activate:     create:     deactivate:     purge:     remove:     update: removeLoadBalancerInput: description:  resourceFields:    loadBalancerId: restartPolicy: description:  resourceFields:    maximumRetryCount: The maximum number of restart on a service    name: secondaryLaunchConfig: description:  resourceFields:    accountId:     build:     capAdd: Add Linux capabilities. <code>--cap-add</code> in a <code>docker run</code> command    capDrop: Drop Linux capabilities. <code>--cap-drop</code> in a <code>docker run</code> command    command: Overwrite the default commands set by the image    count:     cpuSet: CPUs in which to allow execution (0-3, 0,1). <code>--cpuset</code> in a <code>docker run</code> command    cpuShares: CPU shares (relative weight). <code>--cpu-shares</code> in a <code>docker run</code> command    createIndex: The order that the container was created in a service.    created:     dataVolumeMounts:     dataVolumes:     dataVolumesFrom:     dataVolumesFromLaunchConfigs:     deploymentUnitUuid:     description:     devices: Allows you to run devices inside the container without the <code>--privileged</code> flag    dns: Set custom dns servers for the container. <code>--dns</code> in a <code>docker run</code> command    dnsSearch:     domainName:     entryPoint: Overwrite the default entrypoint set by the image. <code>--entrypoint</code> in a <code>docker run</code> command    environment:     expose:     externalId:     extraHosts:     firstRunning:     healthCheck: The configuration of the health monitoring for managed network services    healthState:     hostname:     id:     imageUuid:     instanceLinks:     kind:     labels:     logConfig: The logging configuration. <code>--log-driver</code> in a <code>docker run</code> command    lxcConf: Add custom lxc options. <code>--lxc-conf</code> in a <code>docker run</code> command    memory:     memorySwap: Total memory limit (memory + swap, `<number>[<unit>]`, where unit = b, k, m or g). <code>--memory-swap</code> in a <code>docker run</code> command    name:     nativeContainer:     networkContainerId:     networkIds:     networkLaunchConfig:     networkMode: Set the Network mode for the container. <code>--net</code> in a <code>docker run</code> command <br> `bridge` - creates a new network stack for the container on the docker bridge<br> `none` -no networking for this container<br> `container<colon><name|id>` - reuses another container network stack<br> `host` - use the host network stack inside the container    pidMode: Set the PID (Process) Namespace mode for the container. `host` - use the host's PID namespace inside the container.  <code>--pid</code> in a <code>docker run</code> command    ports:     primaryIpAddress:     privileged: Give extended privileges to this container. <code>--privileged</code> in a <code>docker run</code> command    publishAllPorts: Publish all exposed ports to the host interfaces    readOnly:     registryCredentialId:     removed:     requestedHostId:     securityOpt: Override the default labeling scheme for each container. <code>--security-opt</code> in a <code>docker run</code> command    startCount:     startOnCreate: Whether or not the services in the stack should be started after creation    state:     stdinOpen: Keep STDIN open even if not attached. <code>-i</code> in a <code>docker run</code> command    systemContainer:     transitioning:     transitioningMessage:     transitioningProgress:     tty: Allocate a pseudo-tty. <code>-t</code> in a <code>docker run</code> command    user:     uuid:     version:     volumeDriver:     workingDir: The working directory inside the container resourceActions:    allocate:     console:     create:     deallocate:     execute:     logs:     migrate:     purge:     remove:     restart:     restore:     setlabels:     start:     stop:     update:     updatehealthy:     updateunhealthy: service: description: Rancher adopts the standard Docker Compose terminology for services and defines a basic service as one or more containers created from the same Docker image.  Once a service (consumer) is linked to another service (producer) within the same stack, a DNS record mapped to each container instance is automatically created and discoverable by containers from the "consuming" service. Other benefits of creating a service under Rancher include":" <br><br> * Service HA - the ability to have Rancher automatically monitor container states and maintain a service's desired scale. <br> * Health Monitoring - the ability to set basic monitoring thresholds for container health. resourceFields:    accountId:     createIndex: The order that the container was created in a service.    created:     description:     environmentId: The identifier of which stack the service belongs to    externalId:     fqdn: The fqdn of a service when the [Route 53 DNS service]({{site.baseurl}}/rancher/rancher-services/dns-service/) has started. The format will be `<serviceName>.<stackName>.<environmentName>.<yourHostedZoneName>`.    id:     kind:     launchConfig: The Docker run configuration of a container    metadata: The user added [metadata]({{site.baseurl}}/rancher/metadata-service/#adding-user-metadata-to-a-service) to a service.    name:     removed:     scale: The number of containers to deploy as part of a service    secondaryLaunchConfigs: The list of services that are sidekicks to the service.    selectorContainer: The [selector value]({{site.baseurl}}/rancher/labels/#selector-labels) used to select a [container]({{site.baseurl}}/rancher/api/api-resources/container/) to link to the service based on a service's labels.    selectorLink: The [selector value]({{site.baseurl}}/rancher/labels/#selector-labels) used to select a [service]({{site.baseurl}}/rancher/api/api-resources/service/) to link to the service based on a service's labels.    serviceSchemas:     state:     transitioning:     transitioningMessage:     transitioningProgress:     upgrade:     uuid:     vip:  resourceActions:    activate:     addservicelink:     cancelrollback:     cancelupgrade:     create:     deactivate:     finishupgrade:     remove:     removeservicelink:     rollback:     setservicelinks:     update:     upgrade: serviceConsumeMap: description: Collection Test Description resourceFields:    accountId:     consumedServiceId: The unique identifier of the consumed service    created:     description:     id:     kind:     name:     ports:     removed:     serviceId:     state:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    create:     remove:     update: serviceEvent: description: Collection Test Description resourceFields:    accountId:     created:     description:     externalTimestamp:     healthcheckUuid: The universal unique identifier of the healthcheck     hostId:     id:     instanceId:     kind:     name:     removed:     reportedHealth: The reported health     state:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    create:     remove: serviceExposeMap: description: Collection Test Description resourceFields:    accountId:     created:     description:     id:     instanceId:     ipAddress: The ip address for an external service    kind:     managed:     name:     removed:     serviceId:     state:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    create:     remove: serviceLink: description:  resourceFields:    name:     serviceId: serviceUpgrade: description:  resourceFields:    inServiceStrategy:     toServiceStrategy: serviceUpgradeStrategy: description:  resourceFields:    batchSize: The batch size to upgrade a service (i.e. how many containers to launch at a time)    intervalMillis: The number of milliseconds between upgradingsetLabelsInput: description:  resourceFields:    labels: setLoadBalancerHostsInput: description:  resourceFields:    hostIds: setLoadBalancerListenersInput: description:  resourceFields:    loadBalancerListenerIds: setLoadBalancerServiceLinksInput: description:  resourceFields:    serviceLinks: The list of services linkedsetLoadBalancerTargetsInput: description:  resourceFields:    loadBalancerTargets: setProjectMembersInput: description:  resourceFields:    members: setServiceLinksInput: description:  resourceFields:    serviceLinks: The list of services linkedsetting: description: Collection Test Description resourceFields:    id:     name:     value: snapshot: description: Collection Test Description resourceFields:    accountId:     created:     description:     id:     kind:     managedVolumeUUID: The unique identifier of the managed volume     name:     removed:     state:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:     volumeId:  resourceActions:    backup: Default action    create:     remove: softlayerConfig: description: The configuration to launch a server in SoftLayer. For all cloud providers, Rancher is calling `docker-machine`, so any available options in `docker-machine` are exposed in Rancher. The default fields from `docker-machine` are not listed in the Rancher API, and they can be found in the `docker-machine` documentation.  resourceFields:    apiEndpoint: The SoftLayer API endpoint to use    apiKey: <strong>required</strong> Your API key for your user account.    cpu: The number of CPUs for the machine    diskSize: A value of 0 will set the SoftLayer default.    domain: <strong>required</strong> The domain name for the machine    hostname: The hostname for the machine    hourlyBilling: Whether or not use hourly billing, if `false`, monthly billing is used    image: The OS image to use    localDisk: Whether or not to use local machine disk instead of SoftLayer SAN    memory: The memory for host in MB    privateNetOnly: Whether or not to disable public networking    privateVlanId: The private VLAN ID    publicVlanId: The public VLAN ID    region:     user: <strong>required</strong> Your username for your SoftLayer accountstatsAccess: description: Collection Test Description resourceFields:    token:     url: storagePool: description: A storage pool is a list of hosts that can participate in shared storage.  resourceFields:    accountId:     created:     description:     driverName:     externalId:     id:     kind:     name:     removed:     state:     transitioning:     transitioningMessage:     transitioningProgress:     uuid:  resourceActions:    activate:     create:     deactivate:     purge:     remove:     restore:     update: subscribe: description:  resourceFields:    eventNames: toServiceUpgradeStrategy: description:  resourceFields:    batchSize: The batch size to upgrade a service (i.e. how many containers to launch at a time)    finalScale: The final scale of the upgraded service    intervalMillis: The number of milliseconds between upgrading    toServiceId: The service ID to upgrade    updateLinks: The list of linked services to update totypeDocumentation: description: Collection Test Description resourceFields:    description:     id:     resourceFields: ubiquityConfig: description: The configuration to launch a server in Ubiquity Hosting.  resourceFields:    apiToken: <strong>required</strong> Your Ubiquity Hosting Access Key    apiUsername: <strong>required</strong> Your Ubiquity Hosting Remote ID    clientId: <strong>required</strong> Your Ubiquity Hosting API Client ID    flavorId: The ID of the flavor that will be used for the machine    imageId: The ID of the image that will be used for the machine    zoneId: The ID of the zone that will be used for the machinevirtualboxConfig: description: The configuration to launch a local VM using VirtualBox. Rancher is calling `docker-machine`, so any available options in `docker-machine` are exposed in Rancher. The default fields from `docker-machine` are not listed in the Rancher API, and they can be found in the `docker-machine` documentation.  resourceFields:    boot2dockerUrl: The URL of the boot2docker image. Defaults to the latest available version    cpuCount: The number of CPUs to use to create the VM. Defaults to single CPU    diskSize: The size of disk for the host in MB    hostonlyCidr: The CIDR of the host only adapter    importBoot2dockerVm: The name of a Boot2Docker VM to import    memory: The size of memory for the host in MB    noShare: Whether or not to disable the mount of your home directoryvmwarevcloudairConfig: description: The configuration to launch a machine in vCloudAir. Rancher is just calling `docker-machine`, so any available options in `docker-machine` are exposed in Rancher. The default fields from `docker-machine` are not listed in the Rancher API, and they can be found in the `docker-machine` documentation.  resourceFields:    catalog: The catalog    catalogitem: The catalog item    computeid: The compute ID (if using dedicated cloud)    cpuCount: The number of CPUs to use to create the VM. Defaults to single CPU    dockerPort: The port to use for the Docker daemon    edgegateway: The organization edge gateway    memorySize: The size of memory for Docker VM (in MB) and added as `2048`    orgvdcnetwork: The organization VDC network to attach    password: <strong>required</strong>Your vCloud Air Password    provision: Whether or not to install Docker binaries    publicip: The  organization public IP to use    sshPort:     username: <strong>required</strong> Your vCloud Air username    vdcid: The Virtual Data Center IDvmwarevsphereConfig: description: The configuration to launch a machine in vSphere. Rancher is just calling `docker-machine`, so any available options in `docker-machine` are exposed in Rancher. The default fields from `docker-machine` are not listed in the Rancher API, and they can be found in the `docker-machine` documentation.  resourceFields:    boot2dockerUrl: The URL of the boot2docker image. Defaults to the latest available version    computeIp: The compute host IP where the Docker VM will be instantiated    cpuCount: The number of CPUs to use to create the VM. Defaults to single CPU    datacenter: The datacenter for Docker VM    datastore: The datastore for Docker VM    diskSize: The size of disk for Docker VM (in MB)    memorySize: The size of memory for Docker VM (in MB) and added as `2048`    network: The network where the Docker VM will be attached    password: <strong>required</strong> Your vSphere password    pool: The resource pool for Docker VM    username: <strong>required</strong> Your vSphere username    vcenter: The IP/hostname for vCenter (or ESXi if connecting directly to a single host)volume: description: A volume can be associated to containers or storage pools. <br><br> * A container can have many volumes and containers are mapped to volumes the [mount]({{site.baseurl}}/rancher/api/api-resources/mount/) link on a container. <br> * A storage pool owns many volues. The volume is only available to containers deployed on hostst that are part of the storage pool. When a volume is being created, you do not directly associate it to a storage pool. You will only need to specify a driver and during allocation, Rancher will resolve it to a storage pool. resourceFields:    accountId:     created:     description:     driver:     driverOpts:     externalId:     id:     imageId: The ID of the image that will be used for the machine    instanceId:     isHostPath: Whether or not the path of the volume is on the host    kind:     name:     removed:     state:     transitioning:     transitioningMessage:     transitioningProgress:     uri:     uuid:  resourceActions:    allocate:     create:     deactivate:     deallocate:     purge:     remove:     restore:     update: 